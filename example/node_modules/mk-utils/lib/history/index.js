'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _history = require('history');

var history = _interopRequireWildcard(_history);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var hashHistory = history.createHashHistory();

var listerners = {};

function listen(selfApp, handler) {
    if (!listerners[selfApp]) {
        listerners[selfApp] = [];
    }

    var h = listerners[selfApp].find(function (o) {
        return o.listen == handler;
    });
    if (!h) {

        h = handler;
        var unlisten = hashHistory.listen(function (location, action) {
            var childApp = getChildApp(selfApp, location.pathname);
            handler(childApp, location, action);
        });

        listerners[selfApp].push({
            listen: h,
            unlisten: unlisten
        });
    }
}

function unlisten(selfApp, handler) {
    if (!listerners[selfApp]) return;

    var index = listerners[selfApp].findIndex(function (o) {
        return o.listen == handler;
    });

    if (index == -1) return;

    listerners[selfApp][index].unlisten();
    listerners[selfApp].splice(index, 1);
}

function getChildApp(selfApp) {
    var pathname = hashHistory.location.pathname + hashHistory.location.search;
    if (!pathname || pathname == '/' || pathname.indexOf(selfApp) == -1) return;

    var segs = pathname.split('/');

    var selfIndex = segs.findIndex(function (s) {
        return s.indexOf(selfApp) != -1;
    });

    if (segs.length - 1 == selfIndex) return;

    var ret = segs[selfIndex + 1];

    return ret == '/' ? undefined : ret;
}

function pushChildApp(selfApp, childApp) {
    var pathname = hashHistory.location.pathname;
    if (!pathname || pathname == '/' || pathname.indexOf(selfApp) == -1) {
        hashHistory.push('/' + selfApp + '/' + childApp);
        return;
    }

    var segs = pathname.split('/');

    var selfIndex = segs.findIndex(function (s) {
        return s.indexOf(selfApp) != -1;
    });

    if (segs.length - 1 == selfIndex) {
        segs.push(childApp);
    } else {
        segs.splice(selfIndex + 1, segs.length - selfIndex, childApp);
        //segs[selfIndex + 1] = childApp
    }

    if (pathname == segs.join('/')) return;

    hashHistory.push(segs.join('/'));
}

exports.default = {
    listen: listen,
    unlisten: unlisten,
    getChildApp: getChildApp,
    pushChildApp: pushChildApp,
    location: hashHistory.location
};
module.exports = exports['default'];